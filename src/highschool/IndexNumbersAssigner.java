/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package highschool;


import java.awt.Color;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.BorderFactory;
import javax.swing.JComponent;
import javax.swing.JOptionPane;

import static javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE;

/**
 * @author FRED
 */
public class IndexNumbersAssigner extends javax.swing.JFrame {

    /**
     * Creates new form IndexNumbersAssigner
     */
    private ResultSet rs;
    private Connection con = DbConnection.connectDb();
    private PreparedStatement ps;

    public IndexNumbersAssigner() {
        initComponents();
        setTitle("K.C.S.E Index Numbers Assignment Panel");
        ((JComponent) getContentPane()).setBorder(
                BorderFactory.createMatteBorder(5, 5, 5, 5, Color.MAGENTA));

        this.setIconImage(FrameProperties.icon());

        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        this.addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                try {
                    con.close();
                } catch (SQLException sq) {

                }
                CurrentFrame.currentWindow();
                dispose();
            }
        });
        JSchCode.setText(ConfigurationIntialiser.reminderTime());
        JSchCode.setEditable(false);

        setResizable(false);
        setLocationRelativeTo(null);
        setVisible(true);
        for (int k = 2015; k <= Globals.academicYear(); ++k) {
            JAcademicYear.addItem(String.valueOf(k));
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        adm = new javax.swing.JLabel();
        Jadm = new javax.swing.JTextField();
        academicYear = new javax.swing.JLabel();
        JAcademicYear = new javax.swing.JComboBox<String>();
        schCode = new javax.swing.JLabel();
        JSchCode = new javax.swing.JTextField();
        Jindex = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        cancel = new javax.swing.JButton();
        save = new javax.swing.JButton();
        studentName = new javax.swing.JLabel();
        report = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        adm.setText("admission Number");

        Jadm.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Jadm.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JadmKeyReleased(evt);
            }

            public void keyTyped(java.awt.event.KeyEvent evt) {
                JadmKeyTyped(evt);
            }
        });

        academicYear.setText("Year Of Completion");

        JAcademicYear.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Select K.C.S.E Year"}));

        schCode.setText("School K.C.S.E Prefix Code");

        Jindex.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        Jindex.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JindexKeyReleased(evt);
            }

            public void keyTyped(java.awt.event.KeyEvent evt) {
                JindexKeyTyped(evt);
            }
        });

        jLabel1.setText("Index Number");

        cancel.setText("Close");
        cancel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        save.setText("Save");
        save.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        studentName.setText("Student Name");

        report.setText("View Report");
        report.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(39, 39, 39)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(adm, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(academicYear, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(schCode, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(44, 44, 44)
                                                                .addComponent(JAcademicYear, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(0, 0, Short.MAX_VALUE))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(Jadm, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                                                                .addComponent(studentName, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(27, 27, 27)
                                                                .addComponent(JSchCode, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(Jindex, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(60, 60, 60)
                                                .addComponent(cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(report, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(25, 25, 25)
                                                .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(82, 82, 82))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(adm, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(Jadm, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(studentName, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(44, 44, 44)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(academicYear, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(JAcademicYear, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(43, 43, 43)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(schCode, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(JSchCode, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(Jindex, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(cancel, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
                                        .addComponent(save, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(report, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void JadmKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_JadmKeyReleased

        try {
            String sql = "Select firstname,middlename,lastname,currentform,ImageLocation,currentstream from admission where admissionnumber='" + Jadm.getText() + "'";
            ps = con.prepareStatement(sql);
            rs = ps.executeQuery();
            if (rs.next()) {

                Jadm.setForeground(Color.black);
                studentName.setText(rs.getString("FirstName") + "    " + rs.getString("MiddleName") + "    " + rs.getString("LastName"));

            } else {
                Jadm.setForeground(Color.red);
                studentName.setText("");

            }

        } catch (Exception sq) {
            sq.printStackTrace();
            JOptionPane.showMessageDialog(null, sq.getMessage());
        }
    }//GEN-LAST:event_JadmKeyReleased

    private void JindexKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_JindexKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_JindexKeyReleased

    private void JadmKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_JadmKeyTyped
        char c = evt.getKeyChar();

        if (Character.isAlphabetic(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_JadmKeyTyped

    private void JindexKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_JindexKeyTyped
        char c = evt.getKeyChar();

        if (Character.isAlphabetic(c)) {
            evt.consume();
        }
        if (c == KeyEvent.VK_ENTER) {
            save.doClick();
        }
    }//GEN-LAST:event_JindexKeyTyped

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        if (Jadm.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Invalid admission Number");
        } else {
            if (JAcademicYear.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(this, "Select The K.C.S.E Year");
            } else {
                if (JSchCode.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Kindly Open The System Set up And Configure The School K.C.S.E Prefix Code");
                } else {
                    if (Jindex.getText().isEmpty()) {
                        JOptionPane.showMessageDialog(this, "Kindly Input a Valid Index Number");
                    } else {

                        try {
                            String currentclass = "";
                            String sql = "Select admissionNumber,currentForm from admission where admissionNumber='" + Jadm.getText() + "'";
                            ps = con.prepareStatement(sql);
                            rs = ps.executeQuery();
                            if (rs.next()) {
                                currentclass = rs.getString("CurrentForm");
                                if (Globals.className(currentclass).equalsIgnoreCase("Form 4")) {
                                    String sql3 = "Select admnumber,KCSEIndexNumber from kcseindexNumbers where admnumber='" + Jadm.getText() + "' and academicYear='" + JAcademicYear.getSelectedItem() + "'";
                                    ps = con.prepareStatement(sql3);
                                    rs = ps.executeQuery();
                                    if (rs.next()) {
                                        int option1 = JOptionPane.showConfirmDialog(this, Globals.fullName(rs.getString("admnumber")) + "  Has Already Been Assigned A KCSE Index Number: " + rs.getString("KCSEIndexNumber"), "Confirm Updation", JOptionPane.YES_NO_OPTION);
                                        if (option1 == JOptionPane.NO_OPTION) {

                                        } else {
                                            String sql4 = "Select admnumber,KCSEIndexNumber  from  kcseindexNumbers where KCSEIndexNumber='" + JSchCode.getText() + Jindex.getText() + "'  and academicYear='" + JAcademicYear.getSelectedItem() + "'";
                                            ps = con.prepareStatement(sql4);
                                            rs = ps.executeQuery();
                                            if (rs.next()) {
                                                int option = JOptionPane.showConfirmDialog(this, "K.C.S.E Index Numbers Can Never Be The Same\n Index Number: " + rs.getString("KCSEIndexNumber") + " Is Already In Use By :" + Globals.fullName(rs.getString("admnumber")) + " In The Selected Year\n Do You Want To Continue An Assign This Student This Index Number??\n The System Will Automatically Deassign The Current Holder And The Assign The Index To The New Candidate", "Confirm Updation", JOptionPane.YES_NO_OPTION);
                                                if (option == JOptionPane.NO_OPTION) {

                                                } else {
                                                    String sql5 = "Delete from kcseindexnumbers where admnumber='" + rs.getString("Admnumber") + "' and academicyear='" + JAcademicYear.getSelectedItem() + "' and KCSEIndexNumber='" + rs.getString("KCSEIndexNumber") + "'";
                                                    ps = con.prepareStatement(sql5);
                                                    ps.execute();
                                                    String sql2 = "update kcseindexNumbers set kcseindexnumber='" + JSchCode.getText() + Jindex.getText() + "' where academicyear='" + JAcademicYear.getSelectedItem() + "' and '" + Jadm.getText() + "'";
                                                    ps = con.prepareStatement(sql2);
                                                    ps.execute();
                                                    JOptionPane.showMessageDialog(this, "Student Assigned K.C.S.E Index Number Successfully");
                                                    Jadm.setText("");
                                                    Jindex.setText("");
                                                }
                                            } else {
                                                String sql2 = "update kcseindexNumbers set kcseindexnumber='" + JSchCode.getText() + Jindex.getText() + "' where academicyear='" + JAcademicYear.getSelectedItem() + "' and '" + Jadm.getText() + "'";
                                                ps = con.prepareStatement(sql2);
                                                ps.execute();
                                                JOptionPane.showMessageDialog(this, "Student Assigned K.C.S.E Index Number Successfully");
                                                Jadm.setText("");
                                                Jindex.setText("");
                                            }
                                        }
                                    } else {
                                        String sql4 = "Select admnumber,KCSEIndexNumber  from  kcseindexNumbers where KCSEIndexNumber='" + JSchCode.getText() + Jindex.getText() + "'  and academicYear='" + JAcademicYear.getSelectedItem() + "'";
                                        ps = con.prepareStatement(sql4);
                                        rs = ps.executeQuery();
                                        if (rs.next()) {
                                            int option = JOptionPane.showConfirmDialog(this, "K.C.S.E Index Numbers Can Never Be The Same\n Index Number: " + rs.getString("KCSEIndexNumber") + " Is Already In Use By :" + Globals.fullName(rs.getString("admnumber")) + " In The Selected Year\n Do You Want To Continue An Assign This Student This Index Number??\n The System Will Automatically Deassign The Current Holder And The Assign The Index To The New Candidate", "Confirm Updation", JOptionPane.YES_NO_OPTION);
                                            if (option == JOptionPane.NO_OPTION) {

                                            } else {
                                                String sql5 = "Delete from kcseindexnumbers where admnumber='" + rs.getString("Admnumber") + "' and academicyear='" + JAcademicYear.getSelectedItem() + "' and KCSEIndexNumber='" + rs.getString("KCSEIndexNumber") + "'";
                                                ps = con.prepareStatement(sql5);
                                                ps.execute();
                                                String sql2 = "Insert Into kcseindexNumbers values('" + JSchCode.getText() + Jindex.getText() + "','" + JAcademicYear.getSelectedItem() + "','" + Jadm.getText() + "')";
                                                ps = con.prepareStatement(sql2);
                                                ps.execute();
                                                JOptionPane.showMessageDialog(this, "Student Assigned K.C.S.E Index Number Successfully");
                                                Jadm.setText("");
                                                Jindex.setText("");
                                            }
                                        } else {
                                            String sql2 = "Insert Into kcseindexNumbers values('" + JSchCode.getText() + Jindex.getText() + "','" + JAcademicYear.getSelectedItem() + "','" + Jadm.getText() + "')";
                                            ps = con.prepareStatement(sql2);
                                            ps.execute();
                                            JOptionPane.showMessageDialog(this, "Student Assigned K.C.S.E Index Number Successfully");
                                            Jadm.setText("");
                                            Jindex.setText("");
                                        }

                                    }

                                } else {

                                    int prompter = JOptionPane.showConfirmDialog(this, "The System Has Detected You Are Trying To Allocate Non K.C.S.E Candindate An admission Number\n " + Globals.fullName(Jadm.getText()) + " is An/A " + Globals.className(currentclass) + " " + " (Student)", "Allow Logical Conflict", JOptionPane.YES_NO_OPTION);
                                    if (prompter == JOptionPane.NO_OPTION) {
                                        JOptionPane.showMessageDialog(this, "Change admission Number");
                                    } else {

                                        String sql3 = "Select admnumber,KCSEIndexNumber from kcseindexNumbers where admnumber='" + Jadm.getText() + "' and academicYear='" + JAcademicYear.getSelectedItem() + "'";
                                        ps = con.prepareStatement(sql3);
                                        rs = ps.executeQuery();
                                        if (rs.next()) {
                                            int option1 = JOptionPane.showConfirmDialog(this, Globals.fullName(rs.getString("admnumber")) + "  Has Already Been Assigned A KCSE Index Number: " + rs.getString("KCSEIndexNumber") + "\n Do You Want To Update To The New admission Number??", "Confirm Updation", JOptionPane.YES_NO_OPTION);
                                            if (option1 == JOptionPane.NO_OPTION) {

                                            } else {
                                                String sql4 = "Select admnumber,KCSEIndexNumber  from  kcseindexNumbers where KCSEIndexNumber='" + JSchCode.getText() + Jindex.getText() + "'  and academicYear='" + JAcademicYear.getSelectedItem() + "'";
                                                ps = con.prepareStatement(sql4);
                                                rs = ps.executeQuery();
                                                if (rs.next()) {
                                                    int option = JOptionPane.showConfirmDialog(this, "K.C.S.E Index Numbers Can Never Be The Same\n Index Number: " + rs.getString("KCSEIndexNumber") + " Is Already In Use By :" + Globals.fullName(rs.getString("admnumber")) + " In The Selected Year\n Do You Want To Continue An Assign This Student This Index Number??\n The System Will Automatically Deassign The Current Holder And The Assign The Index To The New Candidate", "Confirm Updation", JOptionPane.YES_NO_OPTION);
                                                    if (option == JOptionPane.NO_OPTION) {

                                                    } else {
                                                        String sql5 = "Delete from kcseindexnumbers where admnumber='" + rs.getString("Admnumber") + "' and academicyear='" + JAcademicYear.getSelectedItem() + "' and KCSEIndexNumber='" + rs.getString("KCSEIndexNumber") + "'";
                                                        ps = con.prepareStatement(sql5);
                                                        ps.execute();
                                                        String sql2 = "update kcseindexNumbers set kcseindexnumber='" + JSchCode.getText() + Jindex.getText() + "' where academicyear='" + JAcademicYear.getSelectedItem() + "' and '" + Jadm.getText() + "'";
                                                        ps = con.prepareStatement(sql2);
                                                        ps.execute();
                                                        JOptionPane.showMessageDialog(this, "Student Assigned K.C.S.E Index Number Successfully");
                                                        Jadm.setText("");
                                                        Jindex.setText("");
                                                    }
                                                } else {
                                                    String sql2 = "update kcseindexNumbers set kcseindexnumber='" + JSchCode.getText() + Jindex.getText() + "' where academicyear='" + JAcademicYear.getSelectedItem() + "' and '" + Jadm.getText() + "'";
                                                    ps = con.prepareStatement(sql2);
                                                    ps.execute();
                                                    JOptionPane.showMessageDialog(this, "Student Assigned K.C.S.E Index Number Successfully");
                                                    Jadm.setText("");
                                                    Jindex.setText("");
                                                }
                                            }
                                        } else {
                                            String sql4 = "Select admnumber,KCSEIndexNumber  from  kcseindexNumbers where KCSEIndexNumber='" + JSchCode.getText() + Jindex.getText() + "'  and academicYear='" + JAcademicYear.getSelectedItem() + "'";
                                            ps = con.prepareStatement(sql4);
                                            rs = ps.executeQuery();
                                            if (rs.next()) {
                                                int option = JOptionPane.showConfirmDialog(this, "K.C.S.E Index Numbers Can Never Be The Same\n Index Number: " + rs.getString("KCSEIndexNumber") + " Is Already In Use By :" + Globals.fullName(rs.getString("admnumber")) + " In The Selected Year\n Do You Want To Continue An Assign This Student This Index Number??\n The System Will Automatically Deassign The Current Holder And The Assign The Index To The New Candidate", "Confirm Updation", JOptionPane.YES_NO_OPTION);
                                                if (option == JOptionPane.NO_OPTION) {

                                                } else {
                                                    String sql5 = "Delete from kcseindexnumbers where admnumber='" + rs.getString("Admnumber") + "' and academicyear='" + JAcademicYear.getSelectedItem() + "' and KCSEIndexNumber='" + rs.getString("KCSEIndexNumber") + "'";
                                                    ps = con.prepareStatement(sql5);
                                                    ps.execute();
                                                    String sql2 = "Insert Into kcseindexNumbers values('" + JSchCode.getText() + Jindex.getText() + "','" + JAcademicYear.getSelectedItem() + "','" + Jadm.getText() + "')";
                                                    ps = con.prepareStatement(sql2);
                                                    ps.execute();
                                                    JOptionPane.showMessageDialog(this, "Student Assigned K.C.S.E Index Number Successfully");
                                                    Jadm.setText("");
                                                    Jindex.setText("");
                                                }
                                            } else {
                                                String sql2 = "Insert Into kcseindexNumbers values('" + JSchCode.getText() + Jindex.getText() + "','" + JAcademicYear.getSelectedItem() + "','" + Jadm.getText() + "')";
                                                ps = con.prepareStatement(sql2);
                                                ps.execute();
                                                JOptionPane.showMessageDialog(this, "Student Assigned K.C.S.E Index Number Successfully");
                                                Jadm.setText("");
                                                Jindex.setText("");
                                            }

                                        }

                                    }

                                }

                            } else {
                                JOptionPane.showMessageDialog(this, "Invalid admission Number check..!!");
                            }

                        } catch (Exception sq) {
                            sq.printStackTrace();
                        }

                    }
                }
            }
        }
    }//GEN-LAST:event_saveActionPerformed

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        CurrentFrame.currentWindow();
        dispose();
    }//GEN-LAST:event_cancelActionPerformed

    private void reportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportActionPerformed

        if (JAcademicYear.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this, "Kindly Select The Academic Year To View Assignment Report");
        } else {

            ReportGenerator.indexNumberAssignmentReport(JAcademicYear.getSelectedItem().toString());
        }


    }//GEN-LAST:event_reportActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IndexNumbersAssigner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IndexNumbersAssigner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IndexNumbersAssigner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IndexNumbersAssigner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IndexNumbersAssigner().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> JAcademicYear;
    private javax.swing.JTextField JSchCode;
    private javax.swing.JTextField Jadm;
    private javax.swing.JTextField Jindex;
    private javax.swing.JLabel academicYear;
    private javax.swing.JLabel adm;
    private javax.swing.JButton cancel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton report;
    private javax.swing.JButton save;
    private javax.swing.JLabel schCode;
    private javax.swing.JLabel studentName;
    // End of variables declaration//GEN-END:variables
}
